# CanonIDL v0.2 for Formualizer — expanded surface draft
spec:
  id: "formualizer/0.2.0-draft"
  version: "0.2.0"
  digest: null
  doc_anchors:
    - { cid: "FZ-INDEX-001", href: "API_CONTRACT.md#11-index-convention" }
    - { cid: "FZ-FP-IEEE-003", href: "API_CONTRACT.md#8.2-floating-point-determinism" }

requirements:
  - id: "FZ-INDEX-001"
    level: "MUST"
    text: "All public APIs use 1-based row/col; 0 is invalid."
    tags: ["api","indexing"]
  - id: "FZ-FP-IEEE-003"
    level: "MUST"
    text: "IEEE-754 double, ties-to-even; FMA/fast-math disabled; canonical quiet NaN."
    tags: ["determinism","numeric"]
  - id: "FZ-ARRAY-RECT-001"
    level: "MUST"
    text: "Array values must be rectangular; ragged arrays are host error HOST_INVALID_ARRAY_SHAPE."
    tags: ["array","validation"]
  - id: "FZ-SPILL-ATOMIC-002"
    level: "MUST"
    text: "Spill commits are atomic per pass; conflicts respect spill.conflict_policy."
    tags: ["spill"]
  - id: "FZ-REG-IDEMP-001"
    level: "MUST"
    text: "Duplicate function registration with identical metadata is idempotent."
    tags: ["registry"]
  - id: "FZ-RANGE-INC-001"
    level: "MUST"
    text: "RangeAddress is inclusive; start_row≤end_row, start_col≤end_col; else host INVALID_ARG."
  - id: "FZ-FINGERPRINT-ALG-001"
    level: "MUST"
    text: "Fingerprint = xxhash64(seed 0xF0RMU417E) of canonical pretty (NFC, uppercased fn names, normalized spaces)."
  - id: "FZ-VOLATILE-STABLE-001"
    level: "MUST"
    text: "Volatile functions are stable within a single evaluation pass; may differ across passes per seed/policy."


# Type definitions
types:
  - name: "TokenKind"
    kind: "enum"
    cases: [
      "Ident","Number","String","LParen","RParen","Comma","Colon","Semicolon",
      "Percent","Plus","Minus","Star","Slash","Caret","Ampersand","Whitespace","Error"
    ]

  - name: "Token"
    cid: "FZ-TYPE-TOK-001"
    kind: "struct"
    fields:
      - { name: "kind", ty: "TokenKind" }
      - { name: "lexeme", ty: "string" }
      - { name: "offset", ty: "u32" }
      - { name: "length", ty: "u32" }

  - name: "Reference"
    cid: "FZ-TYPE-REF-001"
    kind: "struct"
    fields:
      - { name:"sheet", ty:"string?" }
      - { name:"start_row", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"start_col", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"end_row", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"end_col", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }

  - name: "LiteralValue"
    cid: "FZ-TYPE-LV-001"
    kind: "union"
    discriminants:
      - { tag: "Int",      ty: "i64" }
      - { tag: "Number",   ty: "f64" }
      - { tag: "Boolean",  ty: "bool" }
      - { tag: "Text",     ty: "string" }
      - { tag: "Empty" }
      - { tag: "Date",     ty: "date" }
      - { tag: "Time",     ty: "time" }
      - { tag: "DateTime", ty: "datetime" }
      - { tag: "Duration", ty: { kind:"duration", unit:"second", nanos:true } }
      - { tag: "Array",    ty: { kind:"array2d", of:"LiteralValue" } }
      - { tag: "Error",    ty: "ExcelError" }
      - { tag: "Pending" }

  - name: "ExcelError"
    cid: "FZ-TYPE-ERR-001"
    kind: "struct"
    fields:
      - { name:"kind", ty:{ kind:"enum", cases:["Div0","Ref","Name","Value","Num","Null","Na","Spill","Calc","Circ","Cancelled","Custom"]}}
      - { name:"message", ty:"string?" }
      - { name:"extra", ty:"string?" }

  - name: "Cell"
    kind: "struct"
    fields:
      - { name:"value", ty:"LiteralValue" }
      - { name:"formula", ty:"string?" }

  - name: "RangeAddress"
    kind: "struct"
    fields:
      - { name:"sheet", ty:"string" }
      - { name:"start_row", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"start_col", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"end_row", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"end_col", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }

  - name: "CellRef"
    kind: "struct"
    fields:
      - { name:"sheet", ty:"string" }
      - { name:"row", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }
      - { name:"col", ty:{ kind:"int", min:1 }, cid:"FZ-INDEX-001" }

  - name: "EvaluationConfig"
    kind: "struct"
    fields:
      - { name:"enable_parallel", ty:"bool" }
      - { name:"max_threads", ty:"u32?" }
      - { name:"range_expansion_limit", ty:"u32" }
      - { name:"spill_conflict_policy", ty:{ kind:"enum", cases:["Error","FirstWins"] } }
      - { name:"volatile_level", ty:{ kind:"enum", cases:["Always","OnRecalc","OnOpen"] } }
      - { name:"workbook_seed", ty:"u64?" }
      - { name:"cancellation_check_interval", ty:"u32" }
      - { name:"memory_budget", ty:"u64?" }
      - { name:"max_array_cells", ty:"u32" }
      - { name:"max_udf_stack_depth", ty:"u32" }
      - { name:"max_eval_ms", ty:"u64?" }

  - name: "EvaluationResult"
    kind: "struct"
    fields:
      - { name:"computed_vertices", ty:"u64" }
      - { name:"cycle_errors", ty:"u32" }
      - { name:"elapsed_ms", ty:"u64" }
      - { name:"ref_errors_added", ty:"u32" }
      - { name:"volatile_functions_invoked", ty:"u64" }

  - name: "SpillInfo"
    kind: "struct"
    fields:
      - { name:"rows", ty:"u32" }
      - { name:"cols", ty:"u32" }
      - { name:"formula_fingerprint", ty:"u64" }

  - name: "TaskHandle"
    kind: "struct"
    fields:
      - { name:"id", ty:"u64" }

  - name: "CapabilityDescriptor"
    kind: "struct"
    fields:
      - { name:"io_file_read", ty:"bool" }
      - { name:"io_file_write", ty:"bool" }
      - { name:"io_network", ty:"bool" }
      - { name:"io_compression", ty:"bool" }
      - { name:"platform_wasm", ty:"bool" }
      - { name:"platform_threads", ty:"bool" }
      - { name:"platform_sandboxed", ty:"bool" }
      - { name:"calc_parallel", ty:"bool" }
      - { name:"calc_dynamic_topology", ty:"bool" }
      - { name:"calc_streaming_ranges", ty:"bool" }
      - { name:"calc_cancellation", ty:"bool" }
      - { name:"udf_dynamic_registration", ty:"bool" }
      - { name:"udf_plugin_loading", ty:"bool" }
      - { name:"udf_out_of_process", ty:"bool" }
      - { name:"udf_returns_reference", ty:"bool" }
      - { name:"limits_max_rows", ty:"u32" }
      - { name:"limits_max_cols", ty:"u32" }
      - { name:"limits_memory_budget", ty:"u64?" }
      - { name:"limits_max_array_cells", ty:"u32" }
      - { name:"limits_max_udf_stack_depth", ty:"u32" }
      - { name:"limits_max_eval_ms", ty:"u64?" }

  - name: "NamedRange"
    kind: "struct"
    fields:
      - { name:"name", ty:"string" }
      - { name:"sheet", ty:"string?" }
      - { name:"range", ty:"RangeAddress" }

  - name: "Table"
    kind: "struct"
    fields:
      - { name:"name", ty:"string" }
      - { name:"sheet", ty:"string" }
      - { name:"range", ty:"RangeAddress" }
      - { name:"headers", ty:{ kind:"array", of:"string" } }
      - { name:"totals_row", ty:"bool" }

  - name: "MergeRange"
    kind: "struct"
    fields:
      - { name:"sheet", ty:"string" }
      - { name:"start_row", ty:{ kind:"int", min:1 } }
      - { name:"start_col", ty:{ kind:"int", min:1 } }
      - { name:"end_row", ty:{ kind:"int", min:1 } }
      - { name:"end_col", ty:{ kind:"int", min:1 } }

  - name: "FunctionMetadata"
    kind: "struct"
    fields:
      - { name:"name", ty:"string" }
      - { name:"namespace", ty:"string?" }
      - { name:"aliases", ty:{ kind:"array", of:"string" } }
      - { name:"arity_min", ty:"u8" }
      - { name:"arity_max", ty:"u8?" }
      - { name:"caps", ty:"u32" }
      - { name:"deterministic", ty:"bool" }
      - { name:"volatility_scope", ty:{ kind:"enum", cases:["OnRecalc","OnOpen","Always"] } }
      - { name:"description", ty:"string" }
      - { name:"category", ty:"string" }
      - { name:"version", ty:"u16" }

  - name: "PluginDescriptor"
    kind: "struct"
    fields:
      - { name:"name", ty:"string" }
      - { name:"version", ty:"string" }
      - { name:"language", ty:{ kind:"enum", cases:["rust","python","node","process"] } }
      - { name:"entry", ty:"string" }
      - { name:"api_version", ty:"u32" }

# Surface (classes and functions)
surface:
  modules:
    - name: "Formula"
      functions:
        - name: "tokenize"
          cid: "FZ-API-FORM-001"
          in:  [ { name:"formula", ty:"string" } ]
          out: { ty:{ kind:"array", of:"Token" } }
          attributes:
            thread_safety: "reentrant"
            purity: "pure"
          effects:
            witness:
              - { event:"api_call", cid:"FZ-WIT-API-001", fields:["method","args"] }
              - { event:"token_stream", cid:"FZ-WIT-TOK-001", fields:["count"] }
        - name: "parse"
          cid: "FZ-API-FORM-002"
          in:  [ { name:"formula", ty:"string" } ]
          out: { ty:"string" }  # AST JSON (opaque)
          attributes: { thread_safety: "reentrant", purity: "pure" }
          effects:
            witness:
              - { event:"api_call", cid:"FZ-WIT-API-001", fields:["method","args"] }
              - { event:"ast_built", cid:"FZ-WIT-AST-001", fields:["nodes","depth"] }
        - name: "collect_references"
          cid: "FZ-API-FORM-005"
          in:  [ { name:"ast", ty:"string" } ]
          out: { ty:{ kind:"array", of:"Reference" } }
          attributes: { thread_safety: "reentrant", purity: "pure" }
          effects:
            witness:
              - { event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] }
              - { event:"refs_collected", cid:"FZ-WIT-REF-001", fields:["count"] }
        - name: "pretty"
          cid: "FZ-API-FORM-003"
          in:  [ { name:"ast", ty:"string" } ]
          out: { ty:"string" }
          attributes: { thread_safety: "reentrant", purity: "pure" }
          effects:
            witness:
              - { event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] }
        - name: "fingerprint"
          cid: "FZ-API-FORM-004"
          in:  [ { name:"formula_or_ast", ty:"string" } ]
          out: { ty:"u64" }
          attributes: { thread_safety: "reentrant", purity: "pure" }
          effects:
            witness:
              - { event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] }

  classes:
    - name: "Tokenizer"
      tier: 0
      methods:
        - { name:"new", cid:"FZ-API-FORM-TOK-001", in:[{name:"formula",ty:"string"}], out:{ty:"Tokenizer"}, attributes:{ thread_safety:"not_thread_safe" }, effects:{ witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] } ] } }
        - { name:"next", cid:"FZ-API-FORM-TOK-002", in:[], out:{ty:"Token?"}, attributes:{ thread_safety:"not_thread_safe" }, effects:{ witness:[ {event:"token_emit", cid:"FZ-WIT-TOK-002", fields:["kind","offset","length"] } ] } }
        - { name:"reset", cid:"FZ-API-FORM-TOK-003", in:[], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" }, effects:{ witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] } ] } }
        - { name:"close", cid:"FZ-API-FORM-TOK-004", in:[], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" }, effects:{ witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] } ] } }
    - name: "Workbook"
      tier: 1
      methods:
        - { name:"new", cid:"FZ-API-WB-001", in:[], out:{ ty:"Workbook" } }
        - { name:"add_sheet", cid:"FZ-API-WB-002", in:[{name:"name",ty:"string"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"remove_sheet", cid:"FZ-API-WB-003", in:[{name:"name",ty:"string"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"sheet", cid:"FZ-API-WB-004", in:[{name:"name",ty:"string"}], out:{ty:"Sheet"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"sheet_names", cid:"FZ-API-WB-004A", in:[], out:{ty:{kind:"array", of:"string"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"has_sheet", cid:"FZ-API-WB-004B", in:[{name:"name",ty:"string"}], out:{ty:"bool"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"to_json", cid:"FZ-API-WB-005", in:[], out:{ty:"string"}, attributes:{ thread_safety:"reentrant"} }
        - { name:"from_json", cid:"FZ-API-WB-006", in:[{name:"json",ty:"string"}], out:{ty:"Workbook"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"load_path", cid:"FZ-API-WB-008", in:[{name:"path",ty:"string"}], out:{ty:"Workbook"}, effects:{ host_errors:["IO" ] }, attributes:{ thread_safety:"reentrant", gates:["io.file_read"] } }
        - { name:"save_path", cid:"FZ-API-WB-009", in:[{name:"path",ty:"string"}], out:{ty:"void"}, effects:{ host_errors:["IO" ] }, attributes:{ thread_safety:"reentrant", gates:["io.file_write"] } }
        - { name:"add_named_range", cid:"FZ-API-WB-010", in:[{name:"nr",ty:"NamedRange"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"remove_named_range", cid:"FZ-API-WB-011", in:[{name:"name",ty:"string"}], out:{ty:"bool"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"list_named_ranges", cid:"FZ-API-WB-012", in:[], out:{ty:{kind:"array", of:"NamedRange"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"clear_formulas", cid:"FZ-API-WB-013", in:[{name:"range",ty:"RangeAddress?"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"list_tables", cid:"FZ-API-WB-TBL-001", in:[], out:{ty:{kind:"array", of:"Table"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"add_table", cid:"FZ-API-WB-TBL-002", in:[{name:"table",ty:"Table"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"remove_table", cid:"FZ-API-WB-TBL-003", in:[{name:"name",ty:"string"}], out:{ty:"bool"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"list_merges", cid:"FZ-API-WB-MRG-001", in:[], out:{ty:{kind:"array", of:"MergeRange"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"add_merge", cid:"FZ-API-WB-MRG-002", in:[{name:"merge",ty:"MergeRange"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"remove_merge", cid:"FZ-API-WB-MRG-003", in:[{name:"sheet",ty:"string"},{name:"start_row",ty:{kind:"int",min:1}},{name:"start_col",ty:{kind:"int",min:1}},{name:"end_row",ty:{kind:"int",min:1}},{name:"end_col",ty:{kind:"int",min:1}}], out:{ty:"bool"}, attributes:{ thread_safety:"not_thread_safe" } }

    - name: "Sheet"
      tier: 1
      methods:
        - { name:"set_value", cid:"FZ-API-SH-001", in:[{name:"row",ty:{kind:"int",min:1}, cid:"FZ-INDEX-001"},{name:"col",ty:{kind:"int",min:1}, cid:"FZ-INDEX-001"},{name:"value",ty:"LiteralValue"}], out:{ty:"void"}, effects:{ host_errors:["INVALID_ARG"] }, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"set_formula", cid:"FZ-API-SH-002", in:[{name:"row",ty:{kind:"int",min:1}, cid:"FZ-INDEX-001"},{name:"col",ty:{kind:"int",min:1}, cid:"FZ-INDEX-001"},{name:"formula",ty:"string"}], out:{ty:"void"}, effects:{ host_errors:["INVALID_ARG"] }, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"get_cell", cid:"FZ-API-SH-003", in:[{name:"row",ty:{kind:"int",min:1}, cid:"FZ-INDEX-001"},{name:"col",ty:{kind:"int",min:1}, cid:"FZ-INDEX-001"}], out:{ty:"Cell"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"set_values_batch", cid:"FZ-API-SH-004", in:[{name:"start_row",ty:{kind:"int",min:1}},{name:"start_col",ty:{kind:"int",min:1}},{name:"rows",ty:"u32"},{name:"cols",ty:"u32"},{name:"data",ty:{kind:"array2d", of:"LiteralValue"}}], out:{ty:"void"}, effects:{ host_errors:["INVALID_ARG","HOST_INVALID_ARRAY_SHAPE"] }, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"set_formulas_batch", cid:"FZ-API-SH-005", in:[{name:"start_row",ty:{kind:"int",min:1}},{name:"start_col",ty:{kind:"int",min:1}},{name:"rows",ty:"u32"},{name:"cols",ty:"u32"},{name:"data",ty:{kind:"array2d", of:"string"}}], out:{ty:"void"}, effects:{ host_errors:["INVALID_ARG","HOST_INVALID_ARRAY_SHAPE"] }, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"get_values", cid:"FZ-API-SH-006", in:[{name:"range",ty:"RangeAddress"}], out:{ty:{kind:"array2d", of:"LiteralValue"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"get_formulas", cid:"FZ-API-SH-007", in:[{name:"range",ty:"RangeAddress"}], out:{ty:{kind:"array2d", of:"string"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"clear_range", cid:"FZ-API-SH-008", in:[{name:"range",ty:"RangeAddress"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"used_range", cid:"FZ-API-SH-009", in:[], out:{ty:"RangeAddress"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"dimensions", cid:"FZ-API-SH-010", in:[], out:{ ty:{ kind:"struct", fields:[ {name:"rows", ty:"u32"}, {name:"cols", ty:"u32"} ] } }, attributes:{ thread_safety:"reentrant" } }

    - name: "Engine"
      tier: 2
      methods:
        - { name:"new", cid:"FZ-API-ENG-001", in:[{name:"workbook",ty:"Workbook"},{name:"config",ty:"EvaluationConfig?"}], out:{ty:"Engine"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"evaluate_all", cid:"FZ-API-ENG-002", in:[], out:{ty:"EvaluationResult"}, effects:{preserves:["FZ-SPILL-ATOMIC-002"], witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] }, {event:"spill_plan", cid:"FZ-WIT-SPL-001", fields:["count"] }, {event:"spill_commit", cid:"FZ-WIT-SPL-002", fields:["count"] } ]}, attributes:{ thread_safety:"thread_safe_eval_only" } }
        - { name:"evaluate_cell", cid:"FZ-API-ENG-003", in:[{name:"sheet",ty:"string"},{name:"row",ty:{kind:"int",min:1}},{name:"col",ty:{kind:"int",min:1}}], out:{ty:"LiteralValue"}, effects:{requires:["FZ-FP-IEEE-003"], witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] }, {event:"demand_eval", cid:"FZ-WIT-DEM-001", fields:["sheet","row","col"] } ]}, attributes:{ thread_safety:"thread_safe_eval_only" } }
        - { name:"evaluate_cells", cid:"FZ-API-ENG-004", in:[{name:"cells",ty:{kind:"array", of:{kind:"struct", fields:[{name:"sheet",ty:"string"},{name:"row",ty:{kind:"int",min:1}},{name:"col",ty:{kind:"int",min:1}}]}}}], out:{ty:{kind:"array", of:"LiteralValue"}}, attributes:{ thread_safety:"thread_safe_eval_only" } }
        - { name:"evaluate_range", cid:"FZ-API-ENG-004A", in:[{name:"range",ty:"RangeAddress"}], out:{ty:{kind:"array2d", of:"LiteralValue"}}, effects:{ witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] } ] }, attributes:{ thread_safety:"thread_safe_eval_only" } }
        - { name:"get_value", cid:"FZ-API-ENG-005", in:[{name:"sheet",ty:"string"},{name:"row",ty:{kind:"int",min:1}},{name:"col",ty:{kind:"int",min:1}}], out:{ty:"LiteralValue"}, attributes:{ thread_safety:"thread_safe_eval_only" } }
        - { name:"recalc_epoch", cid:"FZ-API-ENG-006", in:[], out:{ty:"u64"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"capabilities", cid:"FZ-API-ENG-007", in:[], out:{ty:"CapabilityDescriptor"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"ensure_builtins_loaded", cid:"FZ-API-ENG-008", in:[], out:{ty:"void"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"spill_info", cid:"FZ-API-ENG-009", in:[{name:"sheet",ty:"string"},{name:"row",ty:{kind:"int",min:1}},{name:"col",ty:{kind:"int",min:1}}], out:{ty:"SpillInfo"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"trace_precedents", cid:"FZ-API-ENG-010", in:[{name:"addr",ty:"CellRef"},{name:"recursive",ty:"bool"},{name:"depth_limit",ty:"u32?"}], out:{ty:{kind:"array", of:"CellRef"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"trace_dependents", cid:"FZ-API-ENG-011", in:[{name:"addr",ty:"CellRef"},{name:"recursive",ty:"bool"},{name:"depth_limit",ty:"u32?"}], out:{ty:{kind:"array", of:"CellRef"}}, attributes:{ thread_safety:"reentrant" } }
        - { name:"snapshot", cid:"FZ-API-ENG-012", in:[], out:{ty:"string"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"diff", cid:"FZ-API-ENG-013", in:[{name:"snapshot",ty:"string"}], out:{ty:"string"}, attributes:{ thread_safety:"reentrant" } }
        - { name:"set_workbook_seed", cid:"FZ-API-ENG-014", in:[{name:"seed",ty:"u64"}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"set_volatile_policy", cid:"FZ-API-ENG-015", in:[{name:"mode",ty:{ kind:"enum", cases:["Always","OnRecalc","OnOpen"] }}], out:{ty:"void"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"evaluate_all_async", cid:"FZ-API-ENG-016", in:[], out:{ty:"TaskHandle"}, attributes:{ thread_safety:"thread_safe_eval_only", gates:["calc.cancellation"] }, effects:{ witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] } ] } }
        - { name:"cancel", cid:"FZ-API-ENG-017", in:[{name:"handle",ty:"TaskHandle"}], out:{ty:"bool"}, attributes:{ thread_safety:"reentrant", gates:["calc.cancellation"] }, effects:{ witness:[ {event:"api_call", cid:"FZ-WIT-API-001", fields:["method"] } ] } }
        - { name:"registry_register_or_replace", cid:"FZ-API-ENG-018", in:[{name:"namespace",ty:"string"},{name:"name",ty:"string"},{name:"meta",ty:"FunctionMetadata"}], out:{ty:"bool"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"registry_unregister", cid:"FZ-API-ENG-019", in:[{name:"namespace",ty:"string"},{name:"name",ty:"string"}], out:{ty:"bool"}, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"plugin_load", cid:"FZ-API-ENG-020", in:[{name:"descriptor",ty:"PluginDescriptor"}], out:{ty:"bool"}, effects:{ host_errors:["PLUGIN_ERROR","ABI_MISMATCH"] }, attributes:{ thread_safety:"not_thread_safe" } }
        - { name:"plugin_list", cid:"FZ-API-ENG-021", in:[], out:{ty:{kind:"array", of:"PluginDescriptor"}}, attributes:{ thread_safety:"reentrant" } }

mappings:
  - lang: "typescript"
    rules:
      - { cid:"FZ-MAP-TS-INT64-001", text:"Int(i64) maps to bigint; JSON encodes as decimal string." }
      - { cid:"FZ-MAP-TS-NAMES-001", text:"Classes PascalCase; methods camelCase." }
      - { cid:"FZ-MAP-TS-DATETIME-001", text:"Use structured Date/Time objects; no JS Date." }
      - { cid:"FZ-MAP-TS-BULK-001", text:"Sheet.setValuesBatch(range, Array2D) convenience wrapper allowed." }
  - { cid:"FZ-MAP-TS-DURATION-001", text:"Duration uses {seconds: bigint, nanos: number}." }
  - lang: "python"
    rules:
      - { cid:"FZ-MAP-PY-NAMES-001", text:"snake_case methods; properties for lightweight getters." }
      - { cid:"FZ-MAP-PY-ERR-001", text:"Host errors raise exceptions; domain errors are values." }
      - { cid:"FZ-MAP-PY-BULK-001", text:"Expose .values(range) bulk get/set returning list[list]." }
  - lang: "c-ffi"
    rules:
      - { cid:"FZ-MAP-C-OWN-001", text:"All returned memory freed via fz_free/fz_array_free." }
      - { cid:"FZ-MAP-C-ABI-001", text:"Structs with abi_size/abi_ver." }
  - { cid:"FZ-MAP-C-IDX-001", text:"Row/col < 1 yields FZ_STATUS_INVALID_INDEX." }

capabilities:
  - id: "calc.parallel"
    level: "MAY"
    text: "Parallel scheduling if capabilities.calc_parallel=true."
  - id: "io.file_read"
    level: "MAY"
    text: "File read operations permitted."
  - id: "io.file_write"
    level: "MAY"
    text: "File write operations permitted."
  - id: "calc.cancellation"
    level: "MAY"
    text: "Async evaluation and cancel supported."
  - id: "formula.streaming_tokenizer"
    level: "MAY"
    text: "Tokenizer class available for streaming tokenization."

witness:
  events:
    - name: "api_call"
      cid: "FZ-WIT-API-001"
      data:
        - { name:"method", ty:"string" }
        - { name:"args", ty:"string?" }
    - name: "token_stream"
      cid: "FZ-WIT-TOK-001"
      data:
        - { name:"count", ty:"u32" }
    - name: "token_emit"
      cid: "FZ-WIT-TOK-002"
      data:
        - { name:"kind", ty:"TokenKind" }
        - { name:"offset", ty:"u32" }
        - { name:"length", ty:"u32" }
    - name: "ast_built"
      cid: "FZ-WIT-AST-001"
      data:
        - { name:"nodes", ty:"u32" }
        - { name:"depth", ty:"u32" }
    - name: "refs_collected"
      cid: "FZ-WIT-REF-001"
      data:
        - { name:"count", ty:"u32" }
    - name: "spill_plan"
      cid: "FZ-WIT-SPL-001"
      data:
        - { name:"count", ty:"u32" }
    - name: "spill_commit"
      cid: "FZ-WIT-SPL-002"
      data:
        - { name:"count", ty:"u32" }
    - name: "demand_eval"
      cid: "FZ-WIT-DEM-001"
      data:
        - { name:"sheet", ty:"string" }
        - { name:"row", ty:"u32" }
        - { name:"col", ty:"u32" }

status:
  host:
    repr: "int32"
    cases:
      - { name:"OK", value: 0 }
      - { name:"INVALID_ARG", value: 1 }
      - { name:"IO", value: 2 }
      - { name:"UNSUPPORTED", value: 3 }
      - { name:"OOM", value: 4 }
      - { name:"TIMEOUT", value: 5 }
      - { name:"CANCELLED", value: 6 }
      - { name:"ABI_MISMATCH", value: 7 }
      - { name:"PLUGIN_ERROR", value: 8 }
      - { name:"INVALID_INDEX", value: 9 }
      - { name:"HOST_INVALID_ARRAY_SHAPE", value: 10 }

ownership:
  defaults:
    return: "transfer"    # callers own returned heap allocations unless value/primitive
    strings: "callee_allocates_caller_frees"  # via fz_free in C-FFI
    arrays:  "callee_allocates_caller_frees"  # via fz_array_free in C-FFI
  notes:
    - "Opaque handles must be freed with matching free() functions."
